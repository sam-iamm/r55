#!/usr/bin/env bash
# r55up - R55 installer and toolchain manager

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
R55_DIR="${R55_DIR:-$HOME/.r55}"
R55_BIN_DIR="$R55_DIR/bin"
R55_LINKER_SCRIPTS_DIR="$R55_DIR/linker-scripts"
NIGHTLY_VERSION="nightly-2025-01-07"
RISCV_TARGET="riscv64imac-unknown-none-elf"

# GitHub repository
REPO_OWNER="sam-iamm"
REPO_NAME="r55"

print_header() {
    echo ""
    echo "███████╗ ███████╗███████╗"
    echo "██╔══██╗ ██╔════╝██╔════╝"
    echo "██████╔╝ ███████╗███████╗"
    echo "██╔══██╗ ╚════██║╚════██║"
    echo "██║  ██║ ███████║███████║"
    echo "╚═╝  ╚═╝ ╚══════╝╚══════╝"
    echo ""
    echo "R55 - RISC-V Smart Contract Compiler"
    echo ""
}

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

detect_platform() {
    local platform="$(uname -s)"
    local arch="$(uname -m)"
    
    case "$platform" in
        Linux)
            PLATFORM_STR="linux"
            ;;
        Darwin)
            PLATFORM_STR="darwin"
            ;;
        MINGW*|MSYS*|CYGWIN*)
            PLATFORM_STR="windows"
            ;;
        *)
            log_error "Unsupported platform: $platform"
            exit 1
            ;;
    esac
    
    case "$arch" in
        x86_64|amd64)
            ARCH_STR="amd64"
            ;;
        arm64|aarch64)
            ARCH_STR="arm64"
            ;;
        *)
            log_error "Unsupported architecture: $arch"
            exit 1
            ;;
    esac
    
    BINARY_NAME="r55-compile-${PLATFORM_STR}-${ARCH_STR}"
    if [[ "$PLATFORM_STR" == "windows" ]]; then
        BINARY_NAME="${BINARY_NAME}.exe"
    fi
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if rustup is installed
    if ! command -v rustup &> /dev/null; then
        log_error "rustup is not installed!"
        log_info "Please install Rust from https://rustup.rs/"
        exit 1
    fi
    
    # Check if cargo is installed
    if ! command -v cargo &> /dev/null; then
        log_error "cargo is not installed!"
        log_info "Please install Rust from https://rustup.rs/"
        exit 1
    fi
    
    log_info "✓ Rust toolchain detected"
}

install_rust_dependencies() {
    log_info "Installing required Rust components..."
    
    # Install nightly toolchain
    if ! rustup toolchain list | grep -q "$NIGHTLY_VERSION"; then
        log_info "Installing $NIGHTLY_VERSION toolchain..."
        rustup install "$NIGHTLY_VERSION"
    else
        log_info "✓ $NIGHTLY_VERSION already installed"
    fi
    
    # Add RISC-V target
    if ! rustup target list --toolchain "$NIGHTLY_VERSION" --installed | grep -q "$RISCV_TARGET"; then
        log_info "Adding $RISCV_TARGET target..."
        rustup target add "$RISCV_TARGET" --toolchain "$NIGHTLY_VERSION"
    else
        log_info "✓ $RISCV_TARGET target already installed"
    fi
    
    # Add rust-src component
    if ! rustup component list --toolchain "$NIGHTLY_VERSION" --installed | grep -q "rust-src"; then
        log_info "Adding rust-src component..."
        rustup component add rust-src --toolchain "$NIGHTLY_VERSION"
    else
        log_info "✓ rust-src component already installed"
    fi
}

download_r55_binary() {
    log_info "Downloading r55-compile binary..."
    
    # Create bin directory
    mkdir -p "$R55_BIN_DIR"
    
    # Get latest release tag
    local latest_tag=$(curl -s "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    
    if [[ -z "$latest_tag" ]]; then
        log_warn "No releases found, building from source instead..."
        build_from_source
        return
    fi
    
    local download_url="https://github.com/$REPO_OWNER/$REPO_NAME/releases/download/$latest_tag/$BINARY_NAME"
    
    log_info "Downloading from: $download_url"
    
    if curl -L -f "$download_url" -o "$R55_BIN_DIR/r55-compile"; then
        chmod +x "$R55_BIN_DIR/r55-compile"
        log_info "✓ Binary downloaded successfully"
    else
        log_warn "Binary not found in release, building from source..."
        build_from_source
    fi
}

build_from_source() {
    log_info "Building r55-compile from source..."
    
    # Create temp directory
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    # Clone repository
    log_info "Cloning repository..."
    git clone "https://github.com/$REPO_OWNER/$REPO_NAME.git"
    cd "$REPO_NAME"
    
    # Build the binary
    log_info "Building r55-compile..."
    cargo build --release --package r55-compile
    
    # Copy binary to destination
    cp "target/release/r55-compile" "$R55_BIN_DIR/"
    chmod +x "$R55_BIN_DIR/r55-compile"
    
    # Copy linker scripts while we have the repo cloned
    install_linker_scripts_from_repo "$temp_dir/$REPO_NAME"
    
    # Clean up
    cd /
    rm -rf "$temp_dir"
    
    log_info "✓ Built from source successfully"
}

install_linker_scripts_from_repo() {
    local repo_path="$1"
    
    # Create linker scripts directory before copying
    mkdir -p "$R55_LINKER_SCRIPTS_DIR"
    
    if [[ -f "$repo_path/r5-rust-rt.x" ]] && [[ -f "$repo_path/r5-bare-bones.x" ]]; then
        cp "$repo_path/r5-rust-rt.x" "$R55_LINKER_SCRIPTS_DIR/"
        cp "$repo_path/r5-bare-bones.x" "$R55_LINKER_SCRIPTS_DIR/"
        log_info "✓ Linker scripts copied from repository"
    fi
}

install_linker_scripts() {
    log_info "Installing linker scripts..."
    
    # Create linker scripts directory
    mkdir -p "$R55_LINKER_SCRIPTS_DIR"
    
    # Check if linker scripts already exist
    if [[ -f "$R55_LINKER_SCRIPTS_DIR/r5-rust-rt.x" ]] && [[ -f "$R55_LINKER_SCRIPTS_DIR/r5-bare-bones.x" ]]; then
        log_info "✓ Linker scripts already installed"
        return
    fi
    
    # Try to download linker scripts from GitHub
    log_info "Downloading linker scripts from GitHub..."
    
    local scripts=("r5-rust-rt.x" "r5-bare-bones.x")
    local success=true
    
    for script in "${scripts[@]}"; do
        local url="https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/main/$script"
        if curl -L -f "$url" -o "$R55_LINKER_SCRIPTS_DIR/$script" 2>/dev/null; then
            log_info "✓ Downloaded $script"
        else
            log_warn "Failed to download $script"
            success=false
            break
        fi
    done
    
    if [[ "$success" == true ]]; then
        log_info "✓ Linker scripts installed successfully"
    else
        log_warn "Failed to download linker scripts, they will be installed if building from source"
        # Clean up partial downloads
        rm -f "$R55_LINKER_SCRIPTS_DIR"/*.x
    fi
}

setup_path() {
    log_info "Setting up PATH..."
    
    local shell_rc=""
    local shell_name=""
    
    # Detect shell and RC file
    if [[ -n "$ZSH_VERSION" ]]; then
        shell_rc="$HOME/.zshrc"
        shell_name="zsh"
    elif [[ -n "$BASH_VERSION" ]]; then
        shell_rc="$HOME/.bashrc"
        shell_name="bash"
    elif [[ -n "$FISH_VERSION" ]]; then
        shell_rc="$HOME/.config/fish/config.fish"
        shell_name="fish"
    else
        shell_rc="$HOME/.profile"
        shell_name="sh"
    fi
    
    # Check if PATH already contains R55_BIN_DIR
    if [[ ":$PATH:" != *":$R55_BIN_DIR:"* ]]; then
        if [[ "$shell_name" == "fish" ]]; then
            echo "set -gx PATH \"$R55_BIN_DIR\" \$PATH" >> "$shell_rc"
        else
            echo "export PATH=\"$R55_BIN_DIR:\$PATH\"" >> "$shell_rc"
        fi
        log_info "✓ Added $R55_BIN_DIR to PATH in $shell_rc"
        log_warn "Run 'source $shell_rc' or restart your terminal to update PATH"
    else
        log_info "✓ $R55_BIN_DIR already in PATH"
    fi
}

verify_installation() {
    log_info "Verifying installation..."
    
    if [[ -f "$R55_BIN_DIR/r55-compile" ]]; then
        log_info "✓ r55-compile installed at $R55_BIN_DIR/r55-compile"
        
        # Try to run it (in the updated PATH)
        if PATH="$R55_BIN_DIR:$PATH" r55-compile --version &> /dev/null; then
            log_info "✓ r55-compile is executable"
        else
            log_warn "r55-compile installed but may need additional setup"
        fi
    else
        log_error "Installation failed!"
        exit 1
    fi
}

main() {
    print_header
    
    # Parse arguments
    case "${1:-}" in
        --help|-h)
            echo "Usage: r55up [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help, -h     Show this help message"
            echo "  --version, -v  Install a specific version"
            echo "  --uninstall    Remove R55 installation"
            echo ""
            echo "Environment variables:"
            echo "  R55_DIR        Installation directory (default: \$HOME/.r55)"
            exit 0
            ;;
        --uninstall)
            log_info "Uninstalling R55..."
            rm -rf "$R55_DIR"
            log_info "✓ R55 uninstalled"
            log_warn "Remember to remove the PATH export from your shell RC file"
            exit 0
            ;;
    esac
    
    detect_platform
    check_prerequisites
    install_rust_dependencies
    download_r55_binary
    install_linker_scripts
    setup_path
    verify_installation
    
    echo ""
    log_info "🎉 R55 installation complete!"
    log_info ""
    log_info "To get started, run:"
    log_info "  source ~/.bashrc  # or ~/.zshrc"
    log_info "  r55-compile --help"
    echo ""
}

main "$@"